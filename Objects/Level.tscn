[gd_scene load_steps=9 format=2]

[ext_resource path="res://Objects/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/PlaceHolder.png" type="Texture" id=2]
[ext_resource path="res://icon.png" type="Texture" id=3]
[ext_resource path="res://TileMaps/res/Land.tres" type="TileSet" id=4]
[ext_resource path="res://assets/bg.png" type="Texture" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends TileMap

var ROLL_UP = 4
var ROLL_DOWN = 5
var cellId = 0
var inventory : Inventory # Comes from Player
var MAX_SLOT = 200
var MAX_ITEM_ID = 0
var doOptions = []

const MOUSE_CENTER = 3
const MAX_DISTANCE_FROM_ZERO = 100

const TID_AIR  = -1
const TID_ROCK = 0
const TID_DIRT = 1
const TID_WOOD = 2

func _ready():
	call_deferred(\"make_holder_like_cell_size\")
	call_deferred(\"update_cell_view\", cellId)
	call_deferred(\"count_max_item_id\")
	
func count_max_item_id():
	MAX_ITEM_ID = tile_set.get_tiles_ids().size() - 1

func make_holder_like_cell_size():
	var p = get_parent().get_node(\"PlaceHolder\")
	var size = p.texture.get_size()
	p.scale = cell_size / size

func _input(event):
	if (event is InputEventMouseButton && event.is_pressed()):
		var wpos = get_global_mouse_position()
		var pos = world_to_map(wpos)
		var cell_id = get_cellv(pos)
		if (event.button_index == 1):
			break_tile(pos)
		elif (event.button_index == 2):
			place_tile(pos, cellId)
		elif (event.button_index == ROLL_UP):
			set_current_cell_id(cellId - 1)
			update_cell_view(cellId)
		elif (event.button_index == ROLL_DOWN):
			set_current_cell_id(cellId + 1)
			update_cell_view(cellId)
		elif (event.button_index == MOUSE_CENTER):
			cellId = cell_id
			update_cell_view(cellId)
	if (event is InputEventMouse):
		var wpos = get_global_mouse_position()
		var ph = get_parent().get_node(\"PlaceHolder\")
		ph.global_position = map_to_world(world_to_map(wpos))

func place_tile(pos: Vector2, tile: int):
	if (pos.x < -MAX_DISTANCE_FROM_ZERO || pos.x > MAX_DISTANCE_FROM_ZERO): return
	if (pos.y < -MAX_DISTANCE_FROM_ZERO || pos.y > MAX_DISTANCE_FROM_ZERO): return
	if (get_cellv(pos) >= 0):
		return
	if (inventory.remove_item_count(tile, 1)):
		set_cellv(pos, tile)
	update_count_label(cellId)

func break_tile(pos: Vector2):
	var cell_id = get_cellv(pos)
	if (cell_id >= 0):
		if (inventory.add_item(cell_id, 1)):
			set_cellv(pos, TID_AIR)
		update_count_label(cellId)

func update_cell_view(id):
	var sprite = get_parent().get_node(\"Canvas/Tile\") as Sprite
	var cellTexture = tile_set.tile_get_texture(id)
	update_count_label(id)
	if (cellTexture):
		var tileTextureRect = tile_set.tile_get_region(id)
		sprite.texture = cellTexture
		sprite.region_enabled = true
		sprite.region_rect = tileTextureRect
		sprite.scale = (sprite.texture.get_size() / tileTextureRect.size) / 2
	else:
		sprite.texture = null

func update_count_label(id):
	if (inventory == null): return
	var label = get_parent().get_node(\"Canvas/Count\")
	if (id >= 0):
		label.text = str(inventory.get_item_count(id))
	else:
		label.text = \"0\"

func set_current_cell_id(new_cell_id):
	if (new_cell_id < 0):
		return
	if (new_cell_id > MAX_ITEM_ID):
		return
	cellId = new_cell_id

func tick():
	if (doOptions.size() > 0):
		for opt in doOptions:
			if (opt is Operate.Operation):
				opt.invoke()
		doOptions.clear()
	else:
		for y in range(-MAX_DISTANCE_FROM_ZERO, MAX_DISTANCE_FROM_ZERO):
			for x in range(-MAX_DISTANCE_FROM_ZERO, MAX_DISTANCE_FROM_ZERO):
				if (get_cell(x, y) != TID_AIR && Random.chance(5)):
					process_tile(x, y)

func process_tile(x, y):
	var cell_id = get_cell(x, y)
	if (cell_id == TID_DIRT and Random.chance(5) and get_cell(x, y-1) == TID_AIR and get_cell(x, y+1) == TID_DIRT):
		_plan_to_place_block(x, y-1, TID_WOOD)
	elif (cell_id == TID_WOOD and Random.chance(5) and get_cell(x, y-1) == TID_AIR):
		_plan_to_place_block(x, y-1, TID_WOOD)
	elif (cell_id == TID_ROCK and Random.chance(10) and get_cell(x, y+1) == TID_AIR):
		_plan_to_place_block(x, y+1, TID_ROCK)

func _plan_to_place_block(x, y, id):
	doOptions.append(
		Operate.Operation.new(
			self, \"__op_place_block\", [x, y, id]
		)
	)

func __op_place_block(x, y, id):
	set_cell(x, y, id)
"

[sub_resource type="GDScript" id=2]
script/source = "extends Timer

func _ready():
	call_deferred(\"setup_tick_for_tilemap\")
	wait_time = G.wait_time
	start()

func setup_tick_for_tilemap():
	var map = get_parent().get_node(\"TileMap\")
	connect(\"timeout\", map, \"tick\")
"

[sub_resource type="GDScript" id=3]
script/source = "extends AudioStreamPlayer

export var audio_name = \"Fazza_Day.ogg\"
export var play_at_start = false
var _file

func _ready():
	call_deferred(\"__setup\", play_at_start)

func __setup(initalizing: bool = false):
	_file = \"res://Sound/\" + audio_name
	stream = load(_file)
	if (initalizing):
		if (play_at_start):
			play()

func set_audio(audio_name):
	self.audio_name = audio_name
	if (playing):
		stop()
	__setup()
"

[node name="Level" type="Node2D"]

[node name="TileMap" type="TileMap" parent="."]
tile_set = ExtResource( 4 )
cell_size = Vector2( 60, 60 )
format = 1
tile_data = PoolIntArray( 131075, 2, 0, 196608, 1, 0, 196609, 1, 0, 196610, 1, 0, 196611, 1, 0, 196612, 0, 0, 262147, 1, 0 )
script = SubResource( 1 )

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( 126.422, 96.5431 )

[node name="Camera2D" type="Camera2D" parent="Player"]
position = Vector2( -121.973, -92.2348 )
current = true

[node name="PlaceHolder" type="Sprite" parent="."]
texture = ExtResource( 2 )
centered = false

[node name="Canvas" type="CanvasLayer" parent="."]

[node name="Tile" type="Sprite" parent="Canvas"]
scale = Vector2( 2.22928, 1.78994 )
texture = ExtResource( 3 )
centered = false

[node name="Count" type="Label" parent="Canvas"]
margin_left = 153.515
margin_top = 10.6946
margin_right = 193.515
margin_bottom = 24.6946
text = "0"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BG2" type="CanvasLayer" parent="."]
layer = -1

[node name="BG" type="Sprite" parent="BG2"]
position = Vector2( 510.676, 297.512 )
scale = Vector2( 0.962177, 0.889326 )
texture = ExtResource( 5 )

[node name="WorldTick" type="Timer" parent="."]
script = SubResource( 2 )

[node name="player" type="AudioStreamPlayer" parent="."]
script = SubResource( 3 )
play_at_start = true
